<div class="playerPage"></div>
<div id="popupHolder" class="container-fluid d-flex flex-column justify-content-center">
	<div class="prev"></div>
	<div class="next"></div>
	<div class="row d-flex justify-content-center">
		<div class="col">
			<div id="spotifyUpdate" class="spotifyUpdate">
				<h3 id="title" class="text-white"></h3>
				<h6 id="artist" class="text-white"></h6>
				<h6 id="tempo" class="text-white"></h6>
			</div>
		</div>
	</div>
	<div id="trackposition">
		<div id="trackpositionfill"></div>
	</div>
</div>

<script>
	// auth
	let CLIENT_ID = "<%= Rails.application.secrets.SPECTRIFY_CLIENT_ID %>";
	const accessToken = "<%= @current_user.access_token %>";

	// player state
	let artistName = "";
	let albumName = "";
	// let albumArt = "";
	let trackURI = "";
	let trackDuration = 1;
	let trackPosition = 0;
	let trackPlaying = false;
	let trackName = "";
	let currentTrack = null;
	let trackTempo = null;
	// playhead location
	let lastTrackPositionUpdate = 0;

	let pollDebounce = 0;

	let bgOn = null;

	// misc ui
	let closetimer = 0;
	let fadeinTime = 10000;
	let fadeoutTime = 4000;

	// --------------------------------------------------------------------------------------
	// network - XMLHttp functions borrowed from github.com/jamescastells - LIFE SAVER!
	// TO DO, convert to ES6 fetchs
	// --------------------------------------------------------------------------------------
	function createRequest( method, url, callback ) {
		// console.log("createRequest Start")
		let request = new XMLHttpRequest();
		request.open( method, url );
		if ( method != "GET" ) {
			request.setRequestHeader( "Content-Type", "application/x-www-form-urlencoded; charset=UTF-8" );
		}
		request.onerror = function() {
			console.error( "An error occured during the request." );
		};
		request.onload = callback.bind( this, request );
		// console.log("createRequest End")
		return request;
	};

	function createAuthorizedRequest( method, url, callback ) {
		// console.log("createAuthorisedRequest Start")
		let request = createRequest( method, url, callback );
		request.setRequestHeader( "Authorization", "Bearer " + accessToken );
		// console.log("createAuthorisedRequest End")
		return request;
	};

	function getUserInformation( callback ) {
		// console.log("getUserInformation Start")
		createAuthorizedRequest( "GET", "https://api.spotify.com/v1/me", function ( request ) {
			// console.log("createAuthRequest ANON Start")
			if ( request.status < 200 || request.status >= 400 ) {
				callback( null );
				return;
			}

			// console.log( "User info retrieved:", request.responseText );
			let userInfo = JSON.parse( request.responseText );
			// console.log("createAuthRequest ANON End")
			callback( userInfo );
		} ).send();
		// console.log("getUserInformation End")
	};

	// --------------------------------------------------------------------------------------
	// polling API for song changes
	// --------------------------------------------------------------------------------------
	// NFI how this works... binding a setTimeout?
	function _pollCurrentlyPlaying( callback ) {
		// get current song info
		createAuthorizedRequest( "GET", "https://api.spotify.com/v1/me/player/currently-playing", function( request ) {
			if ( request.status < 200 || request.status >= 400 ) {
				callback();
				return;
			};

			let data = JSON.parse( request.responseText );
			// console.log("Current Track:", data );
			if ( data.item ) {
				getTrackTempo( data.item.id, updateBackground );
				trackName = data.item.name;
				albumName = data.item.album.name;
				// albumArt = data.item.album.images[2].url;
				artistName = data.item.artists[0].name;
				setNowPlayingTrack( data.item );
				trackPosition = data.progress_ms;
				trackDuration = data.item.duration_ms;
				trackPlaying = data.is_playing
			};
			callback();
		} ).send();
	};

	// NFI how this works... binding a setTimeout?
	function pollCurrentlyPlaying( delay ) {
		if ( pollDebounce ) {
			clearTimeout( pollDebounce );
		}
		pollDebounce = setTimeout( _pollCurrentlyPlaying.bind( this, pollCurrentlyPlaying.bind( this ) ), delay || 500 );
	};

	function getTrackTempo( trackID, callback ) {
		createAuthorizedRequest( "GET", `https://api.spotify.com/v1/audio-features/${ trackID }`, function( request ) {
			if ( request.status < 200 || request.status >= 400 ) {
				return;
			};

			let data = JSON.parse( request.responseText );
			trackTempo = data.tempo;

			callback();
		} ).send();
	}

	// --------------------------------------------------------------------------------------
	// commands for playback
	// --------------------------------------------------------------------------------------
	function sendCommand( method, command, querystring ) {
		// console.log( "method: " + method );
		console.log( "command: " + command );
		// console.log( "querystring: " + querystring );
		let url = "https://api.spotify.com/v1/me/player/" + command + ( ( querystring ) ? ( "?" + querystring ) : "" );
		// console.log( url )
		createAuthorizedRequest( method, url, function ( request ) {
			if ( request.status >= 200 && request.status < 400 ) {
				// console.log("command response:", request.responseText);
			};
			pollCurrentlyPlaying( 1500 );
		} ).send();
	};

	// --------------------------------------------------------------------------------------
	// DOM updates
	// --------------------------------------------------------------------------------------
	function updateTrackPosition() {
		// get the current time
		let time = new Date().getTime();

		// if global variable not set, set to time just acquired
		if ( lastTrackPositionUpdate == 0 ) {
			lastTrackPositionUpdate = time;
		};

		// calc the difference between last update and time just acquired
		let elapsedTime = time - lastTrackPositionUpdate;
		// update new global time to time just acquired, so next pass references it
		lastTrackPositionUpdate = time;

		// track playing is update from _pollCurrentlyPlaying
		if ( trackPlaying ) {
			trackPosition += elapsedTime;
		};

		let playheadLocation = trackPosition * 100 / trackDuration;
		playheadLocation = Math.max( Math.min( 100, playheadLocation ), 0 );
		document.getElementById( "trackpositionfill" ).style.width = playheadLocation + "%";
	}

	function notificationPopup( title, subtitle, tempo ) {
		document.getElementById( "title" ).innerText = title || "";
		document.getElementById( "artist" ).innerText = subtitle || "";
		document.getElementById( "tempo" ).innerText = tempo || "";
		$( "#spotifyUpdate" ).addClass("visible");

		clearTimeout( closetimer );
		closetimer = setTimeout( function () {
			$( "#spotifyUpdate" ).removeClass( "visible" );
		}, 5000 );
	}

	function setNowPlayingTrack( track ) {
		if ( track.uri == trackURI ) {
			return;
		}
		currentTrack = track;
		trackURI = track.uri;
		notificationPopup( trackName, artistName + " - " + albumName, trackTempo );
	}

	function updateBackground( tempo, callback ) {
		if ( bgOn ) {
			clearTimeout( bgOn );
		}
		// divide the song time by the tempo to get how many times i call this function
		bgOn = setTimeout( randomiseBackground, tempo );
	}

	function connect() {
		console.log( "Retrieving user info." );
		getUserInformation( function( userInfo ) {
			// console.log( "getUserInfo ANON Start" )
			if ( !userInfo ) {
				accessToken = "";
				return;
			}

			notificationPopup("Hello " + ( userInfo.display_name || userInfo.id ) + "!", "Make sure you\'re playing something in Spotify!" );
			console.log( "Connecting to stream..." )
			pollCurrentlyPlaying( 2500 );
			// console.log( "getUserInfo ANON End" )
			console.log( "Connected.");
		} );
	}

	function initUI() {
		document.getElementById( "trackposition" ).addEventListener( "mousedown", function ( event ) {
			let time = event.offsetX * trackDuration / document.body.offsetWidth;
			trackPosition = time;
			console.log( trackPosition );
			sendCommand( "PUT", "seek", "position_ms=" + Math.round( time ) );
		} );

		setInterval( updateTrackPosition, 1000 );
	}

	// setup keyboard for playback commands
	function initKeyboard() {
		window.addEventListener("keyup", function ( event ) {
			// left
			if ( event.keyCode === 37 ) {
				console.log("Prev...");
				sendCommand("POST", "previous");
			}
			// right
			if ( event.keyCode === 39 ) {
				console.log("Next...");
				sendCommand("POST", "next");
			}
			// space
			if ( event.keyCode === 32 ) {
				if (trackPlaying) {
					console.log("Pausing...");
					trackPlaying = false;
					sendCommand("PUT", "pause");
				} else {
					console.log("Playing...");
					trackPlaying = true;
					sendCommand("PUT", "play");
				}
			}
		});
	}

	// --------------------------------------------------------------------------------------
	// fireItUp
	// --------------------------------------------------------------------------------------
	function fireItUp() {
		initKeyboard();
		initUI();
		connect();
	}

	window.addEventListener( "load", fireItUp );
</script>