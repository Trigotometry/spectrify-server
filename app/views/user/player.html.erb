<div class="playerPage"></div>
<div class="container">
	<div class="row">
		<div class="col d-flex justify-content-center align-center">
			<div id="toast" class="toast">
				<span id="text"></span>
				<span id="text2"></span>
			</div>
		</div>
	</div>
	<div class="prev"></div>
	<div class="next"></div>
	<div class="trackposition" id="trackposition">
		<div class="fill" id="trackpositionfill"></div>
	</div>
</div>

<script>
	// auth
	let CLIENT_ID = "<%= Rails.application.secrets.SPECTRIFY_CLIENT_ID %>";
	const accessToken = "<%= @current_user.access_token %>";

	// player state
	let artistName = "";
	let albumName = "";
	let visibleAlbumImageURL = "";
	let nextVectorData = null;
	let trackDuration = 180000;
	let trackURI = "";
	let trackPosition = 0;
	let trackPlaying = false;
	let trackName = "";
	let imageList = [];
	let currentTrack = null;

	let lastTrackPositionUpdate = 0;

	// misc ui
	let closetimer = 0;
	let fadeinTime = 10000;
	let fadeoutTime = 4000;

	// --------------------------------------------------------------------------------------
	// Network - XMLborrowed from github.com/jamescastells - LIFE SAVER!
	// --------------------------------------------------------------------------------------
	function createRequest( method, url, onload ) {
		let request = new XMLHttpRequest();
		request.open(method, url);
		if (method != "GET") {
			request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
		}
		request.onerror = function () {};
		request.onload = onload.bind(this, request);
		return request;
	};

	function createAuthorizedRequest( method, url, onload ) {
		let request = createRequest( method, url, onload );
		request.setRequestHeader( "Authorization", "Bearer " + accessToken );
		return request;
	};


	function _pollCurrentlyPlaying( callback ) {
		createAuthorizedRequest("GET", "https://api.spotify.com/v1/me/player/currently-playing", function ( request ) {
			if (request.status < 200 || request.status >= 400) {
				callback();
				return;
			};

			let data = JSON.parse(request.responseText);
			console.log("got data", data);
			if (data.item) {
				trackName = data.item.name;
				albumName = data.item.album.name;
				artistName = data.item.artists[0].name;
				setNowPlayingTrack(data.item);
				trackPosition = data.progress_ms;
				trackDuration = data.item.duration_ms;
				trackPlaying = data.is_playing
			};
			callback();
		} ).send();
	};

	let pollDebounce = 0;
	function pollCurrentlyPlaying( delay ) {
		if (pollDebounce) {
			clearTimeout(pollDebounce);
		}
		pollDebounce = setTimeout(_pollCurrentlyPlaying.bind( this, pollCurrentlyPlaying.bind( this ) ), delay || 5000 );
	};

	function getUserInformation( callback ) {
		createAuthorizedRequest( "GET", "https://api.spotify.com/v1/me", function ( request ) {
			if ( request.status < 200 || request.status >= 400 ) {
				callback(null);
				return;
			}

			console.log( "User info retrieved:", request.responseText );
			let data = JSON.parse( request.responseText );
			callback( data );
		} ).send();
	};

	// can setup to play hidden songs
	// function sendPlayCommand( payload ) {
	// 	createAuthorizedRequest("PUT", "https://api.spotify.com/v1/me/player/play", function (request) {
	// 		if (request.status >= 200 && request.status < 400) {
	// 			console.log("play command response", request.responseText);
	// 		}
	// 		pollCurrentlyPlaying(1500);
	// 	}).send(JSON.stringify(payload));
	// }

	function fetchArtist( artist_uri, callback ) {
		console.log( "fetching artist", artist_uri );
		let artistId = artist_uri.split(":")[2];
		createAuthorizedRequest( "GET", "https://api.spotify.com/v1/artists/" + artistId, function ( request ) {
			if ( request.status >= 200 && request.status < 400 ) {
				let data = JSON.parse(request.responseText);
				callback( data );
			}
		} ).send();
	};

	// --------------------------------------------------------------------------------------
	// commands for playback
	// --------------------------------------------------------------------------------------
	function sendCommand( method, command, querystring ) {
		console.log("COMMAND: " + command);
		let url = "https://api.spotify.com/v1/me/player/" + command + (
			querystring
				? ("?" + querystring)
				: ""
		);
		createAuthorizedRequest(method, url, function (request) {
			if (request.status >= 200 && request.status < 400) {
				console.log("Command response:", request.responseText);
			};
			pollCurrentlyPlaying(1500);
		} ).send();
	};

	function sendPlayContext(uri, offset) {
		sendPlayCommand({
			context_uri: uri,
			offset: {
				position: offset || 0
			}
		});
	}

	// --------------------------------------------------------------------------------------
	// DOM UI
	// --------------------------------------------------------------------------------------
	function updateTrackPosition() {
		let t = (new Date()).getTime();
		if ( lastTrackPositionUpdate == 0 ) {
			lastTrackPositionUpdate = t;
		}

		let dt = t - lastTrackPositionUpdate;
		lastTrackPositionUpdate = t;

		if ( trackPlaying ) {
			trackPosition += dt;
		}

		let w = trackPosition * 100 / trackDuration;
		w = Math.max( Math.min( 100, w ), 0 );
		document.getElementById( "trackpositionfill" ).style.width = w + "%";
	}

	function toast(title, subtitle) {
		document.getElementById( "text" ).innerText = title || "";
		document.getElementById( "text2" ).innerText = subtitle || "";
		document.getElementById( "toast" ).className = "toast visible";

		clearTimeout( closetimer );
		closetimer = setTimeout( function () {
			document.getElementById( "toast" ).className = "toast";
		}, 5000 );
	}

	function setNowPlayingTrack( track ) {
		if ( track.uri == trackURI ) {
			return;
		}
		currentTrack = track;
		trackURI = track.uri;
		toast( trackName, artistName + " - " + albumName );
	}

	function connect() {
		console.log( "Connecting with access token: " + accessToken );
		getUserInformation( function ( userinfo ) {
			if ( !userinfo ) {
				accessToken = "";
				// showLogin();
				return;
			}

			// hideLogin();
			toast("Hello " + (
				userinfo.display_name || userinfo.id
			) + "!", "Make sure you\"re playing something in Spotify!");
			pollCurrentlyPlaying(2000);
		} );
	}

	function initUI() {
		document.getElementById( "trackposition" ).addEventListener("mousedown", function ( event ) {
			let time = event.offsetX * trackDuration / document.body.offsetWidth;
			trackPosition = time;
			sendCommand( "PUT", "seek", "position_ms=" + Math.round( time ) );
		});

		setInterval( updateTrackPosition, 1000 );
	}

	// setup buttons for playback commands
	function initKeyboard() {
		window.addEventListener("keyup", function ( event ) {
			// left
			if ( event.keyCode === 37 ) {
				console.log("Next...");
				sendCommand("POST", "previous");
			}
			// right
			if ( event.keyCode === 39 ) {
				console.log("Prev...");
				sendCommand("POST", "next");
			}
			// space
			if ( event.keyCode === 32 ) {
				if (trackPlaying) {
					console.log("Pausing...");
					trackPlaying = false;
					sendCommand("PUT", "pause");
				} else {
					console.log("Playing...");
					trackPlaying = true;
					sendCommand("PUT", "play");
				}
			}
		});
	}

	// --------------------------------------------------------------------------------------
	// fireItUp
	// --------------------------------------------------------------------------------------
	function fireItUp() {
		initKeyboard();
		initUI();
		connect();
	}

	window.addEventListener( "load", fireItUp );
</script>