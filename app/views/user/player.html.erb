<div class="playerPage" style="display: none"></div>

<!-- Spotify CDN Setup -->
<script src="https://sdk.scdn.co/spotify-player.js"></script>
<!-- Spotify Connect Creation -->
<script>

let songInfo = {
	currentTack: null,
	currentSongId: null,
	previousSongId: null,
	songId: null,
	songTempo: null
}
let songAnalysisData = {
	beats: null,
	bars: null,
	segments: null
};

let player;
let token = '<%= @current_user.access_token %>';
// let songInfoURL = "https://api.spotify.com/v1/audio-features/";
let songAudioAnalysisURL = "https://api.spotify.com/v1/audio-analysis/";


window.onSpotifyWebPlaybackSDKReady = function() {

	player = new Spotify.Player( {
		name: 'Spectrify',
		getOAuthToken: function( callback ) { callback( token ); }
	} );

	// Error handling
	player.addListener( 'initialization_error', ( { message } ) => { console.error( message ); } );
	player.addListener( 'authentication_error', ( { message } ) => { console.error( message ); } );
	player.addListener( 'account_error', ( { message } ) => { console.error( message ); } );
	player.addListener( 'playback_error', ( { message } ) => { console.error( message ); } );

	// Ready
	player.addListener( 'ready', ( { device_id } ) => {
		console.log( 'Ready with Device ID', device_id );
	} );

	// Not Ready
	player.addListener( 'not_ready', ( { device_id } ) => {
		console.log( 'Device ID has gone offline', device_id );
	} );

	// Connect to the player!
	player.connect()
		.then( success => {
			if ( success ) {
				console.log('The Web Playback SDK successfully connected to Spotify!')
			}
		} );

	// Playback status updates
	player.addListener( 'player_state_changed', function( state ) {
			// run another preset function to get state
			// this is the only way I can use a promise off the back of a jQuery GET
			// request to update the variables needed to pass into my visualise function
			player.getCurrentState()
				.then( function( state ) {
					if ( !state ) {
						console.error('getCurrentState 1; User is not playing music through the Web Playback SDK');
						return;
					};

					// check to see if this is the first play
					if ( songInfo.currentSongId === null ) {
						// if first time streaming to Spectrify tab, update current song data with response from Spotify
						songInfo.currentSongId = state.track_window.current_track.id;
					// check to see if the stored current song ID is equal to the returned Spotify song ID
					} else if ( songInfo.currentSongId !== state.track_window.current_track.id ) {
						// if the song has changed then update the stored current song ID with the new one, assign the old one purely for reference
						console.log( "Current song mismatch, updating with response." )
						songInfo.previousSongId = songInfo.currentSongId;
						songInfo.currentSongId = state.track_window.current_track.id;
					}

					console.log( 'Currently Playing:', state.track_window.current_track );
				} );

			// run another preset function to get state, this time pinging API for song analysis
			player.getCurrentState()
				.then( function ( state ) {
					if ( !state ) {
						console.error('getCurrentState 2; User is not playing music through the Web Playback SDK');
						return;
					};

					if ( songInfo.currentSongId === songInfo.previousSongId ) {
						return;
					} else if ( state.paused ) {
						return;
					} else {
						$.get( {
							url: songAudioAnalysisURL + songInfo.currentSongId,
							headers: { "Authorization": `Bearer ${ token }` }
						}, function( { bars, beats, segments } ) {
							songAnalysisData.bars = bars;
							songAnalysisData.beats = beats;
							songAnalysisData.segments = segments;
							// console.log( songAnalysisData );
						} );
					};
				} )
				.then( gotData( songAnalysisData ) );
		} );

};
</script>
